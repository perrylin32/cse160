class Cube {
    constructor(duck = false) {
        this.type = 'cube';
        this.color = [0.5, 0.5, 0.5, 1.0];
        this.matrix = new Matrix4();
        this.normalMatrix = new Matrix4();
        this.vertexBuffer = null;
        this.textureNumber = 1;
        this.duck = false;

        this.vertices32 = new Float32Array([
            0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0,
            0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0,
            0.0, 0.0, -1.0, 1.0, 0.0, -1.0, 1.0, 1.0, -1.0,
            0.0, 0.0, -1.0, 1.0, 1.0, -1.0, 0.0, 1.0, -1.0,
            0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, -1.0,
            0.0, 1.0, 0.0, 0.0, 1.0, -1.0, 1.0, 1.0, -1.0,
            0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, -1.0,
            0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 1.0, 0.0, -1.0,
            0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, -1.0,
            0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, -1.0,
            1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, -1.0,
            1.0, 0.0, 0.0, 1.0, 0.0, -1.0, 1.0, 1.0, -1.0
        ]);

        this.vert = new Float32Array([
            0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0,
            0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0,
            0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0,
            0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0,
            0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0,
            0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0,
            0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0,
            0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0,
            0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0,
            0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0,
            1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0,
            1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0
        ]);

        this.UV32 = new Float32Array([
            0, 0, 1, 0, 1, 1,
            0, 0, 1, 1, 0, 1,
            1, 0, 0, 0, 0, 1,
            1, 0, 0, 1, 1, 1,
            0, 0, 1, 0, 1, 1,
            0, 0, 0, 1, 1, 1,
            1, 1, 0, 1, 0, 0,
            1, 1, 1, 0, 0, 0,
            0, 0, 0, 1, 1, 1,
            0, 0, 1, 0, 1, 1,
            1, 0, 1, 1, 0, 1,
            1, 0, 0, 0, 0, 1
        ]);

        this.UVS = new Float32Array([
            0, 0, 1, 1, 1, 0,
            0, 0, 0, 1, 1, 1,
            0, 0, 0, 1, 1, 1,
            0, 0, 1, 1, 1, 0,
            0, 0, 0, 1, 1, 1,
            0, 0, 1, 1, 1, 0,
            0, 0, 0, 1, 1, 1,
            0, 0, 1, 1, 1, 0,
            0, 0, 0, 1, 1, 1,
            0, 0, 1, 1, 1, 0,
            0, 0, 0, 1, 1, 1,
            0, 0, 1, 1, 1, 0
        ]);

        this.normals = new Float32Array([
            0, 0, -1, 0, 0, -1, 0, 0, -1,
            0, 0, -1, 0, 0, -1, 0, 0, -1,
            0, 1, 0, 0, 1, 0, 0, 1, 0,
            0, 1, 0, 0, 1, 0, 0, 1, 0,
            1, 0, 0, 1, 0, 0, 1, 0, 0,
            1, 0, 0, 1, 0, 0, 1, 0, 0,
            - 1, 0, 0, -1, 0, 0, -1, 0, 0,
            - 1, 0, 0, -1, 0, 0, -1, 0, 0,
            0, -1, 0, 0, -1, 0, 0, -1, 0,
            0, -1, 0, 0, -1, 0, 0, -1, 0,
            0, 0, 1, 0, 0, 1, 0, 0, 1,
            0, 0, 1, 0, 0, 1, 0, 0, 1
        ]);
    }

    render() {

        if (this.vertexBuffer === null) {
            this.vertexBuffer = gl.createBuffer();
        }

        var rgba = this.color;

        gl.uniform1i(u_whichTexture, this.textureNumber);

        gl.uniform4f(u_FragColor, rgba[0], rgba[1], rgba[2], rgba[3]);

        gl.uniformMatrix4fv(u_ModelMatrix, false, this.matrix.elements);

        gl.uniformMatrix4fv(u_NormalMatrix, false, this.normalMatrix.elements);

        if (this.duck == true) {
            // Front
            drawTriangle3DUVNormal([0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0], [0, 0, 1, 0, 1, 1], [0, 0, -1, 0, 0, -1, 0, 0, -1]);
            drawTriangle3DUVNormal([0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0], [0, 0, 1, 1, 0, 1], [0, 0, -1, 0, 0, -1, 0, 0, -1]);

            // Back
            drawTriangle3DUVNormal([0.0, 0.0, -1.0, 1.0, 0.0, -1.0, 1.0, 1.0, -1.0], [1, 0, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1, 0, 0, 1]);
            drawTriangle3DUVNormal([0.0, 0.0, -1.0, 1.0, 1.0, -1.0, 0.0, 1.0, -1.0], [1, 0, 0, 1, 1, 1], [0, 0, 1, 0, 0, 1, 0, 0, 1]);

            // Top
            drawTriangle3DUVNormal([0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, -1.0], [0, 0, 1, 0, 1, 1], [0, 1, 0, 0, 1, 0, 0, 1, 0]);
            drawTriangle3DUVNormal([0.0, 1.0, 0.0, 0.0, 1.0, -1.0, 1.0, 1.0, -1.0], [0, 0, 0, 1, 1, 1], [0, 1, 0, 0, 1, 0, 0, 1, 0]);

            // Bottom
            drawTriangle3DUVNormal([0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, -1.0], [1, 1, 0, 1, 0, 0], [0, -1, 0, 0, -1, 0, 0, -1, 0]);
            drawTriangle3DUVNormal([0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 1.0, 0.0, -1.0], [1, 1, 1, 0, 0, 0], [0, -1, 0, 0, -1, 0, 0, -1, 0]);

            // Left
            drawTriangle3DUVNormal([0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, -1.0], [0, 0, 0, 1, 1, 1], [-1, 0, 0, -1, 0, 0, -1, 0, 0]);
            drawTriangle3DUVNormal([0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, -1.0], [0, 0, 1, 0, 1, 1], [-1, 0, 0, -1, 0, 0, -1, 0, 0]);

            // Right
            drawTriangle3DUVNormal([1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, -1.0], [1, 0, 1, 1, 0, 1], [1, 0, 0, 1, 0, 0, 1, 0, 0]);
            drawTriangle3DUVNormal([1.0, 0.0, 0.0, 1.0, 0.0, -1.0, 1.0, 1.0, -1.0], [1, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 0, 1, 0, 0]);
        } else {
            // Front
            drawTriangle3DUVNormal([0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0], [0, 0, 1, 1, 1, 0], [0, 0, -1, 0, 0, -1, 0, 0, -1]);
            drawTriangle3DUVNormal([0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0], [0, 0, 0, 1, 1, 1], [0, 0, -1, 0, 0, -1, 0, 0, -1]);

            // Back
            drawTriangle3DUVNormal([0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0], [0, 0, 0, 1, 1, 1], [0, 0, 1, 0, 0, 1, 0, 0, 1]);
            drawTriangle3DUVNormal([0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0], [0, 0, 1, 1, 1, 0], [0, 0, 1, 0, 0, 1, 0, 0, 1]);

            // Top
            drawTriangle3DUVNormal([0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0], [0, 0, 0, 1, 1, 1], [0, 1, 0, 0, 1, 0, 0, 1, 0]);
            drawTriangle3DUVNormal([0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0], [0, 0, 1, 1, 1, 0], [0, 1, 0, 0, 1, 0, 0, 1, 0]);

            // Bottom
            drawTriangle3DUVNormal([0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0], [0, 0, 0, 1, 1, 1], [0, -1, 0, 0, -1, 0, 0, -1, 0]);
            drawTriangle3DUVNormal([0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0], [0, 0, 1, 1, 1, 0], [0, -1, 0, 0, -1, 0, 0, -1, 0]);

            // Left
            drawTriangle3DUVNormal([0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0], [0, 0, 0, 1, 1, 1], [-1, 0, 0, -1, 0, 0, -1, 0, 0]);
            drawTriangle3DUVNormal([0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0], [0, 0, 1, 1, 1, 0], [-1, 0, 0, -1, 0, 0, -1, 0, 0]);

            // Right
            drawTriangle3DUVNormal([1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0], [0, 0, 0, 1, 1, 1], [1, 0, 0, 1, 0, 0, 1, 0, 0]);
            drawTriangle3DUVNormal([1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0], [0, 0, 1, 1, 1, 0], [1, 0, 0, 1, 0, 0, 1, 0, 0]);
    }


    }
}
